// Generated from ucsd/xpath/evaluator/XQuery.g4 by ANTLR 4.3
package ucsd.xpath.evaluator;
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class XQueryLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.3", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__12=1, T__11=2, T__10=3, T__9=4, T__8=5, T__7=6, T__6=7, T__5=8, T__4=9, 
		T__3=10, T__2=11, T__1=12, T__0=13, JOIN=14, NOT=15, AND=16, OR=17, TEXTFUNCTION=18, 
		FNAME=19, SLASH=20, DSLASH=21, CONCAT=22, ValueEq=23, IDEq=24, ASTERISK=25, 
		DOT=26, UPPER=27, RETURN=28, FOR=29, IN=30, LET=31, ASSIGN=32, WHERE=33, 
		SOME=34, EMPTY=35, SATISFIES=36, FILENAME=37, STR=38, NAME=39, WHITESPACES=40, 
		A=41, B=42, C=43, D=44, E=45, F=46, G=47, H=48, I=49, J=50, K=51, L=52, 
		M=53, N=54, O=55, P=56, Q=57, R=58, S=59, T=60, U=61, V=62, W=63, X=64, 
		Y=65, Z=66;
	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] tokenNames = {
		"'\\u0000'", "'\\u0001'", "'\\u0002'", "'\\u0003'", "'\\u0004'", "'\\u0005'", 
		"'\\u0006'", "'\\u0007'", "'\b'", "'\t'", "'\n'", "'\\u000B'", "'\f'", 
		"'\r'", "'\\u000E'", "'\\u000F'", "'\\u0010'", "'\\u0011'", "'\\u0012'", 
		"'\\u0013'", "'\\u0014'", "'\\u0015'", "'\\u0016'", "'\\u0017'", "'\\u0018'", 
		"'\\u0019'", "'\\u001A'", "'\\u001B'", "'\\u001C'", "'\\u001D'", "'\\u001E'", 
		"'\\u001F'", "' '", "'!'", "'\"'", "'#'", "'$'", "'%'", "'&'", "'''", 
		"'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'", "'0'", "'1'", 
		"'2'", "'3'", "'4'", "'5'", "'6'", "'7'", "'8'", "'9'", "':'", "';'", 
		"'<'", "'='", "'>'", "'?'", "'@'", "'A'", "'B'"
	};
	public static final String[] ruleNames = {
		"T__12", "T__11", "T__10", "T__9", "T__8", "T__7", "T__6", "T__5", "T__4", 
		"T__3", "T__2", "T__1", "T__0", "JOIN", "NOT", "AND", "OR", "TEXTFUNCTION", 
		"FNAME", "SLASH", "DSLASH", "CONCAT", "ValueEq", "IDEq", "ASTERISK", "DOT", 
		"UPPER", "RETURN", "FOR", "IN", "LET", "ASSIGN", "WHERE", "SOME", "EMPTY", 
		"SATISFIES", "FILENAME", "STR", "NAME", "WHITESPACES", "A", "B", "C", 
		"D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", 
		"R", "S", "T", "U", "V", "W", "X", "Y", "Z"
	};


	public XQueryLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "XQuery.g4"; }

	@Override
	public String[] getTokenNames() { return tokenNames; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2D\u016e\b\1\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\3\2\3\2\3\2\3\3\3\3\3\4\3\4\3\5\3"+
		"\5\3\5\3\5\3\5\3\6\3\6\3\7\3\7\3\b\3\b\3\t\3\t\3\n\3\n\3\13\3\13\3\f\3"+
		"\f\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\16\3\16\3\17\3\17\3\17\3"+
		"\17\3\17\3\20\3\20\3\20\3\20\3\21\3\21\3\21\3\21\3\22\3\22\3\22\3\23\3"+
		"\23\3\23\3\23\3\23\3\23\3\23\3\24\6\24\u00c6\n\24\r\24\16\24\u00c7\3\24"+
		"\3\24\3\24\3\24\3\24\3\25\3\25\3\26\3\26\3\26\3\27\3\27\3\30\3\30\3\30"+
		"\3\30\5\30\u00da\n\30\3\31\3\31\3\31\3\31\3\31\5\31\u00e1\n\31\3\32\3"+
		"\32\3\33\3\33\3\34\3\34\3\34\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\36\3"+
		"\36\3\36\3\36\3\37\3\37\3\37\3 \3 \3 \3 \3!\3!\3!\3\"\3\"\3\"\3\"\3\""+
		"\3\"\3#\3#\3#\3#\3#\3$\3$\3$\3$\3$\3$\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3"+
		"&\3&\6&\u011c\n&\r&\16&\u011d\3&\3&\3&\3&\3&\3&\3\'\3\'\7\'\u0128\n\'"+
		"\f\'\16\'\u012b\13\'\3\'\3\'\3(\6(\u0130\n(\r(\16(\u0131\3)\6)\u0135\n"+
		")\r)\16)\u0136\3)\3)\3*\3*\3+\3+\3,\3,\3-\3-\3.\3.\3/\3/\3\60\3\60\3\61"+
		"\3\61\3\62\3\62\3\63\3\63\3\64\3\64\3\65\3\65\3\66\3\66\3\67\3\67\38\3"+
		"8\39\39\3:\3:\3;\3;\3<\3<\3=\3=\3>\3>\3?\3?\3@\3@\3A\3A\3B\3B\3C\3C\2"+
		"\2D\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17\35"+
		"\20\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61\32\63\33\65\34\67\359\36"+
		";\37= ?!A\"C#E$G%I&K\'M(O)Q*S+U,W-Y.[/]\60_\61a\62c\63e\64g\65i\66k\67"+
		"m8o9q:s;u<w=y>{?}@\177A\u0081B\u0083C\u0085D\3\2 \7\2))\60;C\\aac|\6\2"+
		"\62;C\\aac|\3\2$$\5\2\13\f\17\17\"\"\4\2CCcc\4\2DDdd\4\2EEee\4\2FFff\4"+
		"\2GGgg\4\2HHhh\4\2IIii\4\2JJjj\4\2KKkk\4\2LLll\4\2MMmm\4\2NNnn\4\2OOo"+
		"o\4\2PPpp\4\2QQqq\4\2RRrr\4\2SSss\4\2TTtt\4\2UUuu\4\2VVvv\4\2WWww\4\2"+
		"XXxx\4\2YYyy\4\2ZZzz\4\2[[{{\4\2\\\\||\u0174\2\3\3\2\2\2\2\5\3\2\2\2\2"+
		"\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2"+
		"\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2"+
		"\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2"+
		"\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2"+
		"\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2"+
		"\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2"+
		"M\3\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2\2Y\3"+
		"\2\2\2\2[\3\2\2\2\2]\3\2\2\2\2_\3\2\2\2\2a\3\2\2\2\2c\3\2\2\2\2e\3\2\2"+
		"\2\2g\3\2\2\2\2i\3\2\2\2\2k\3\2\2\2\2m\3\2\2\2\2o\3\2\2\2\2q\3\2\2\2\2"+
		"s\3\2\2\2\2u\3\2\2\2\2w\3\2\2\2\2y\3\2\2\2\2{\3\2\2\2\2}\3\2\2\2\2\177"+
		"\3\2\2\2\2\u0081\3\2\2\2\2\u0083\3\2\2\2\2\u0085\3\2\2\2\3\u0087\3\2\2"+
		"\2\5\u008a\3\2\2\2\7\u008c\3\2\2\2\t\u008e\3\2\2\2\13\u0093\3\2\2\2\r"+
		"\u0095\3\2\2\2\17\u0097\3\2\2\2\21\u0099\3\2\2\2\23\u009b\3\2\2\2\25\u009d"+
		"\3\2\2\2\27\u009f\3\2\2\2\31\u00a1\3\2\2\2\33\u00ab\3\2\2\2\35\u00ad\3"+
		"\2\2\2\37\u00b2\3\2\2\2!\u00b6\3\2\2\2#\u00ba\3\2\2\2%\u00bd\3\2\2\2\'"+
		"\u00c5\3\2\2\2)\u00ce\3\2\2\2+\u00d0\3\2\2\2-\u00d3\3\2\2\2/\u00d9\3\2"+
		"\2\2\61\u00e0\3\2\2\2\63\u00e2\3\2\2\2\65\u00e4\3\2\2\2\67\u00e6\3\2\2"+
		"\29\u00e9\3\2\2\2;\u00f0\3\2\2\2=\u00f4\3\2\2\2?\u00f7\3\2\2\2A\u00fb"+
		"\3\2\2\2C\u00fe\3\2\2\2E\u0104\3\2\2\2G\u0109\3\2\2\2I\u010f\3\2\2\2K"+
		"\u0119\3\2\2\2M\u0125\3\2\2\2O\u012f\3\2\2\2Q\u0134\3\2\2\2S\u013a\3\2"+
		"\2\2U\u013c\3\2\2\2W\u013e\3\2\2\2Y\u0140\3\2\2\2[\u0142\3\2\2\2]\u0144"+
		"\3\2\2\2_\u0146\3\2\2\2a\u0148\3\2\2\2c\u014a\3\2\2\2e\u014c\3\2\2\2g"+
		"\u014e\3\2\2\2i\u0150\3\2\2\2k\u0152\3\2\2\2m\u0154\3\2\2\2o\u0156\3\2"+
		"\2\2q\u0158\3\2\2\2s\u015a\3\2\2\2u\u015c\3\2\2\2w\u015e\3\2\2\2y\u0160"+
		"\3\2\2\2{\u0162\3\2\2\2}\u0164\3\2\2\2\177\u0166\3\2\2\2\u0081\u0168\3"+
		"\2\2\2\u0083\u016a\3\2\2\2\u0085\u016c\3\2\2\2\u0087\u0088\7>\2\2\u0088"+
		"\u0089\7\61\2\2\u0089\4\3\2\2\2\u008a\u008b\7]\2\2\u008b\6\3\2\2\2\u008c"+
		"\u008d\7}\2\2\u008d\b\3\2\2\2\u008e\u008f\7f\2\2\u008f\u0090\7q\2\2\u0090"+
		"\u0091\7e\2\2\u0091\u0092\7*\2\2\u0092\n\3\2\2\2\u0093\u0094\7>\2\2\u0094"+
		"\f\3\2\2\2\u0095\u0096\7_\2\2\u0096\16\3\2\2\2\u0097\u0098\7\177\2\2\u0098"+
		"\20\3\2\2\2\u0099\u009a\7@\2\2\u009a\22\3\2\2\2\u009b\u009c\7B\2\2\u009c"+
		"\24\3\2\2\2\u009d\u009e\7&\2\2\u009e\26\3\2\2\2\u009f\u00a0\7*\2\2\u00a0"+
		"\30\3\2\2\2\u00a1\u00a2\7f\2\2\u00a2\u00a3\7q\2\2\u00a3\u00a4\7e\2\2\u00a4"+
		"\u00a5\7w\2\2\u00a5\u00a6\7o\2\2\u00a6\u00a7\7g\2\2\u00a7\u00a8\7p\2\2"+
		"\u00a8\u00a9\7v\2\2\u00a9\u00aa\7*\2\2\u00aa\32\3\2\2\2\u00ab\u00ac\7"+
		"+\2\2\u00ac\34\3\2\2\2\u00ad\u00ae\5e\63\2\u00ae\u00af\5o8\2\u00af\u00b0"+
		"\5c\62\2\u00b0\u00b1\5m\67\2\u00b1\36\3\2\2\2\u00b2\u00b3\5m\67\2\u00b3"+
		"\u00b4\5o8\2\u00b4\u00b5\5y=\2\u00b5 \3\2\2\2\u00b6\u00b7\5S*\2\u00b7"+
		"\u00b8\5m\67\2\u00b8\u00b9\5Y-\2\u00b9\"\3\2\2\2\u00ba\u00bb\5o8\2\u00bb"+
		"\u00bc\5u;\2\u00bc$\3\2\2\2\u00bd\u00be\7v\2\2\u00be\u00bf\7g\2\2\u00bf"+
		"\u00c0\7z\2\2\u00c0\u00c1\7v\2\2\u00c1\u00c2\7*\2\2\u00c2\u00c3\7+\2\2"+
		"\u00c3&\3\2\2\2\u00c4\u00c6\t\2\2\2\u00c5\u00c4\3\2\2\2\u00c6\u00c7\3"+
		"\2\2\2\u00c7\u00c5\3\2\2\2\u00c7\u00c8\3\2\2\2\u00c8\u00c9\3\2\2\2\u00c9"+
		"\u00ca\7\60\2\2\u00ca\u00cb\7z\2\2\u00cb\u00cc\7o\2\2\u00cc\u00cd\7n\2"+
		"\2\u00cd(\3\2\2\2\u00ce\u00cf\7\61\2\2\u00cf*\3\2\2\2\u00d0\u00d1\7\61"+
		"\2\2\u00d1\u00d2\7\61\2\2\u00d2,\3\2\2\2\u00d3\u00d4\7.\2\2\u00d4.\3\2"+
		"\2\2\u00d5\u00da\7?\2\2\u00d6\u00d7\5[.\2\u00d7\u00d8\5s:\2\u00d8\u00da"+
		"\3\2\2\2\u00d9\u00d5\3\2\2\2\u00d9\u00d6\3\2\2\2\u00da\60\3\2\2\2\u00db"+
		"\u00dc\7?\2\2\u00dc\u00e1\7?\2\2\u00dd\u00de\5c\62\2\u00de\u00df\5w<\2"+
		"\u00df\u00e1\3\2\2\2\u00e0\u00db\3\2\2\2\u00e0\u00dd\3\2\2\2\u00e1\62"+
		"\3\2\2\2\u00e2\u00e3\7,\2\2\u00e3\64\3\2\2\2\u00e4\u00e5\7\60\2\2\u00e5"+
		"\66\3\2\2\2\u00e6\u00e7\7\60\2\2\u00e7\u00e8\7\60\2\2\u00e88\3\2\2\2\u00e9"+
		"\u00ea\5u;\2\u00ea\u00eb\5[.\2\u00eb\u00ec\5y=\2\u00ec\u00ed\5{>\2\u00ed"+
		"\u00ee\5u;\2\u00ee\u00ef\5m\67\2\u00ef:\3\2\2\2\u00f0\u00f1\5]/\2\u00f1"+
		"\u00f2\5o8\2\u00f2\u00f3\5u;\2\u00f3<\3\2\2\2\u00f4\u00f5\5c\62\2\u00f5"+
		"\u00f6\5m\67\2\u00f6>\3\2\2\2\u00f7\u00f8\5i\65\2\u00f8\u00f9\5[.\2\u00f9"+
		"\u00fa\5y=\2\u00fa@\3\2\2\2\u00fb\u00fc\7<\2\2\u00fc\u00fd\7?\2\2\u00fd"+
		"B\3\2\2\2\u00fe\u00ff\5\177@\2\u00ff\u0100\5a\61\2\u0100\u0101\5[.\2\u0101"+
		"\u0102\5u;\2\u0102\u0103\5[.\2\u0103D\3\2\2\2\u0104\u0105\5w<\2\u0105"+
		"\u0106\5o8\2\u0106\u0107\5k\66\2\u0107\u0108\5[.\2\u0108F\3\2\2\2\u0109"+
		"\u010a\5[.\2\u010a\u010b\5k\66\2\u010b\u010c\5q9\2\u010c\u010d\5y=\2\u010d"+
		"\u010e\5\u0083B\2\u010eH\3\2\2\2\u010f\u0110\5w<\2\u0110\u0111\5S*\2\u0111"+
		"\u0112\5y=\2\u0112\u0113\5c\62\2\u0113\u0114\5w<\2\u0114\u0115\5]/\2\u0115"+
		"\u0116\5c\62\2\u0116\u0117\5[.\2\u0117\u0118\5w<\2\u0118J\3\2\2\2\u0119"+
		"\u011b\7$\2\2\u011a\u011c\t\3\2\2\u011b\u011a\3\2\2\2\u011c\u011d\3\2"+
		"\2\2\u011d\u011b\3\2\2\2\u011d\u011e\3\2\2\2\u011e\u011f\3\2\2\2\u011f"+
		"\u0120\7\60\2\2\u0120\u0121\7z\2\2\u0121\u0122\7o\2\2\u0122\u0123\7n\2"+
		"\2\u0123\u0124\7$\2\2\u0124L\3\2\2\2\u0125\u0129\7$\2\2\u0126\u0128\n"+
		"\4\2\2\u0127\u0126\3\2\2\2\u0128\u012b\3\2\2\2\u0129\u0127\3\2\2\2\u0129"+
		"\u012a\3\2\2\2\u012a\u012c\3\2\2\2\u012b\u0129\3\2\2\2\u012c\u012d\7$"+
		"\2\2\u012dN\3\2\2\2\u012e\u0130\t\3\2\2\u012f\u012e\3\2\2\2\u0130\u0131"+
		"\3\2\2\2\u0131\u012f\3\2\2\2\u0131\u0132\3\2\2\2\u0132P\3\2\2\2\u0133"+
		"\u0135\t\5\2\2\u0134\u0133\3\2\2\2\u0135\u0136\3\2\2\2\u0136\u0134\3\2"+
		"\2\2\u0136\u0137\3\2\2\2\u0137\u0138\3\2\2\2\u0138\u0139\b)\2\2\u0139"+
		"R\3\2\2\2\u013a\u013b\t\6\2\2\u013bT\3\2\2\2\u013c\u013d\t\7\2\2\u013d"+
		"V\3\2\2\2\u013e\u013f\t\b\2\2\u013fX\3\2\2\2\u0140\u0141\t\t\2\2\u0141"+
		"Z\3\2\2\2\u0142\u0143\t\n\2\2\u0143\\\3\2\2\2\u0144\u0145\t\13\2\2\u0145"+
		"^\3\2\2\2\u0146\u0147\t\f\2\2\u0147`\3\2\2\2\u0148\u0149\t\r\2\2\u0149"+
		"b\3\2\2\2\u014a\u014b\t\16\2\2\u014bd\3\2\2\2\u014c\u014d\t\17\2\2\u014d"+
		"f\3\2\2\2\u014e\u014f\t\20\2\2\u014fh\3\2\2\2\u0150\u0151\t\21\2\2\u0151"+
		"j\3\2\2\2\u0152\u0153\t\22\2\2\u0153l\3\2\2\2\u0154\u0155\t\23\2\2\u0155"+
		"n\3\2\2\2\u0156\u0157\t\24\2\2\u0157p\3\2\2\2\u0158\u0159\t\25\2\2\u0159"+
		"r\3\2\2\2\u015a\u015b\t\26\2\2\u015bt\3\2\2\2\u015c\u015d\t\27\2\2\u015d"+
		"v\3\2\2\2\u015e\u015f\t\30\2\2\u015fx\3\2\2\2\u0160\u0161\t\31\2\2\u0161"+
		"z\3\2\2\2\u0162\u0163\t\32\2\2\u0163|\3\2\2\2\u0164\u0165\t\33\2\2\u0165"+
		"~\3\2\2\2\u0166\u0167\t\34\2\2\u0167\u0080\3\2\2\2\u0168\u0169\t\35\2"+
		"\2\u0169\u0082\3\2\2\2\u016a\u016b\t\36\2\2\u016b\u0084\3\2\2\2\u016c"+
		"\u016d\t\37\2\2\u016d\u0086\3\2\2\2\n\2\u00c7\u00d9\u00e0\u011d\u0129"+
		"\u0131\u0136\3\b\2\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}